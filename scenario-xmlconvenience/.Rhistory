cat("The header out info: \n")
cat("***********************: \n")
for(i in seq_along(headerout)){
cat(headerout[i])
}
headerin <- str_split(gather_obj["headerIn"],"\r")[[1]]
cat("The header in info: \n")
cat("***********************: \n")
for(i in seq_along(headerin)){
cat(headerin[i])
}
text <- str_split(gather_obj["text"],"\r")[[1]]
cat("The return text: \n")
cat("***********************: \n")
for(i in seq_along(text)){
cat(text[i])
}
}
info <- debugGatherer()
problemsG <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
#url <- "http://www.r-datacollection.com/materials/http/simple.html"
url <- "httpbin.org/cookies/set?myname=Eddie"
simple1 <- getURL(url = url, curl =  problemsG)
presentHTTP(info$value())
simple1 <- getURL(url =  "httpbin.org/redirect/20", curl =  problemsG)
presentHTTP(info$value())
info <- debugGatherer()
problemsM <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
urls <- readLines("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
urls
getURL("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
getURLContent("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
download.file("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
try1 <- getURL("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
class(try1)
urls
try1
str_split(try1,"\n")
?readLines
function listdir($dir='') {
if (!is_dir($dir)) {
return false;
}
$files = array();
listdiraux($dir, $files);
return $files;
}
?getForm
q()
library(plyr)
library(RCurl)
library(stringr)
library(XML)
url <- "http://www.r-datacollection.com/materials/http/GETexample.php"
namepar <- "Laurent+Franckx"
agepar <- "477"
url_get <- paste(url,"?","name=",namepar,"&","age =", agepar,sep="")
cat(getURL(url_get))
q()
log(99)
ln(99)
?log
log(11)/log(2)
2^7
2^6
log(101)/log(2)
log(401)/log(2)
2^9
2^8
log(1001)/log(2)
library(travelr)
q()
sqrt(13)
q()
RSiteSearch(".RData corrupted")
library(httr)
r5 <- GET(url = "https://data.seattle.gov/views/8agr-hifc.json?accessType=WEBSITE&method=getDefaultView")
content(r5)$columns
?close
?system.file
?iconv
library(tm)
getTokenizers()
?system
q()
library("poweRlaw")
m_m = displ$new(moby)
data(moby)
m_m = displ$new(moby)
(est = estimate_xmin(m_m))
m_m$setXmin(est)
plot(m_m)
summary(m_m$internal)
summary(m_m$internal$frq)
summary(m_m$internal$freq)
summary(m_m$internal$values)
tail(m_m$internal$freq)
head(GlobFreqTable)
?row.names
q()
?agrep
load("D:/coursera/dsc_capstone/accum_mat_4gr.RData")
load("D:/coursera/dsc_capstone/accum_mat_3gr.RData")
q()
load("D:/coursera/dsc_capstone/accum_mat_2gr.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/accum_mat_2gr_amatch.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/accum_mat_3gr.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/accum_mat_3gr_amatchk0.25.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/tst_vs_tr_4_news_blogs_k_0.25.RData")
View(TextToTest)
View(TextToTest)
shiny::runApp('D:/coursera/dsc_capstone/app1')
samplesize <- 10
resdir <- "D:/coursera/caps_res/"
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep="")
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""))
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TestCorpus <- "news"
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""))
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
i <- 4
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""))
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest
TextToTest <- TextToTest[, 2]
TextToTest
splitstring <- strsplit(TextToTest, " ")[[1]]
splitstring <- strsplit(TextToTest, " ")[[1]]
i <-1
splitstring <- strsplit(TextToTest[i], " ")[[1]]
TextToTest[i]
class(TextToTest[i])
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""), stringsAsFactors = FALSE)
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest <- TextToTest[, 2]
i <-4
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""), stringsAsFactors = FALSE)
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest <- TextToTest[, 2]
TextToTest
j <- 1
splitstring <- strsplit(TextToTest[j], " ")[[1]]
splitstring
stringlenth <- length(splitstring)
testword <- splitstring[stringlenth]
testword
testword_vec <- character(length(TextToTest))
testword_vec
for(j in seq_along(length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
TextToTest <- t(rbind(TextToTest,testword_vec))
for(j in seq_along(length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
TextToTest <- t(rbind(TextToTest,testword_vec))
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest <- TextToTest[, 2]
TextToTest
testword_vec <- character(length(TextToTest))
for(j in seq_along(length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
testword_vec
splitstring[stringlenth]
j
length(TextToTest)
testword_vec <- character(length(TextToTest))
for(j in seq_along(1:length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
testword_vec
TextToTest <- t(rbind(TextToTest,testword_vec))
TextToTest
colnames(TextToTest) <- c("first","V3")
TextToTest
CorpusUsedForTest <- TrainCorpus
TextToTest$first <- as.character(TextToTest$first)
TestResult <- sapply(TextToTest$first, function(x) SearchWrapper(x, CorpusUsedForTest, corpuslist, decrease = k), simplify = TRUE)
TrainCorpus <- "news"
CorpusUsedForTest <- TrainCorpus
TextToTest$first <- as.character(TextToTest$first)
TestResult <- sapply(TextToTest$first, function(x) SearchWrapper(x, CorpusUsedForTest, corpuslist, decrease = k), simplify = TRUE)
class(TextToTest)
TextToTest <- as.data.frame(TextToTest)
CorpusUsedForTest <- TrainCorpus
TextToTest$first <- as.character(TextToTest$first)
TestResult <- sapply(TextToTest$first, function(x) SearchWrapper(x, CorpusUsedForTest, corpuslist, decrease = k), simplify = TRUE)
load(file = "app1/data/corpuslist.RData")
getwd()
source('D:/coursera/dsc_capstone/testing_model.R', echo=TRUE)
?lineprof
devtools::install_github("hadley/lineprof")
library(lineprof)
lineprof
?lineprof
?shine
?stri_count_words
q()
?gc()
gcinfo(verbose)
getOption("verbose")
gcinfo(TRUE)
gc()
gcinfo(verbose)
getOption("verbose")
f3 <- function() {
x <- 1:1e6
function() 10
}
z <- f3()
z
ls(z)
environment(z)
environment(z)$x
f3 <- function() {
x <- 1:1e6
function() 10
}
z <- f3()
head(environment(z)$x)
tail(environment(z)$x)
z
shiny::runApp('D:/coursera/dsc_capstone/app2')
library(travelr)
q()
?rowMeans
?colMax
?apply
?close
(0.05*6+0.2*6+0.1*9+0.1*8+0.55*11)/11.2
(0.05*6+0.2*6+0.1*9+0.1*8+0.55*11)/11.2
?make
?quantile
q()
?aggregate
?join
plyr::join
?plyr::join
q()
?plot
q()
source('D:/rwebscraping/chap8exercises.r', echo=TRUE)
name
str_extract_all
?str_extract_all
names_split <- str_replace(names)
names_split <- lapply(names, str_replace)
names_split <- lapply(names, function(x) str_split(x, " "))
names_split
names_split <- sapply(names, function(x) str_split(x, " "))
names_split
str_extract_all(raw.data, "[[:alpha:]., ]{2,}")
str_extract_all(raw.data, "[[:alpha:]., ]{2,}")[[1]]
class(str_extract_all(raw.data, "[[:alpha:]., ]{2,}")[[1]]
)
names_split <- sapply(names_inter, function(x) str_split(x, " "))
names_inter<- str_extract_all(raw.data, "[[:alpha:]., ]{2,}")[[1]]
names_split <- sapply(names_inter, function(x) str_split(x, " "))
names_split
str_locate_all(names, "\\. ")
str_locate_all(name, "\\. ")
name
str_locate_all(name, "[[a-zA-Z]*{2,}\\. ")
str_locate_all(name, "[a-zA-Z]{2,}\\. ")
str_detect(name, "[a-zA-Z]{2,}\\. ")
str_detect(name, "[a-zA-Z]{2,}, ")
reverse_names <- name(str_detect(name, "[a-zA-Z]{2,}, "))
reverse_names <- name[str_detect(name, "[a-zA-Z]{2,}, ")]
reverse_names
reverse_names_split <- str_split(reverse_names, ", ")
reverse_names_split
reverse_names_split[[1]][1]
reverse_names_split[[1]][2]
lapply(reverse_names_split, function(x) str_c(x[2,],x[1,]))
lapply(reverse_names_split, function(x) str_c(x[2],x[1]))
?str_c
lapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
reverse_names_correct <- sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
reverse_names <- name[str_detect(name, "[a-zA-Z]{2,}, ")]
reverse_names_split <- str_split(reverse_names, ", ")
reverse_names_correct <- sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
name[reverse_names] <- reverse_names_correct
name
reverse_names_correct
reverse_names <- name[str_detect(name, "[a-zA-Z]{2,}, ")]
reverse_names_split <- str_split(reverse_names, ", ")
reverse_names_correct <- sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
name[reverse_names]
class(name[reverse_names])
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
name[reverse_names]
reverse_names
name[reverse_names]
reverse_names
reverse_names_pos <- str_detect(name, "[a-zA-Z]{2,}, ")
reverse_names <- name[reverse_names_pos]
reverse_names_split <- str_split(reverse_names, ", ")
reverse_names_correct <- sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
name[reverse_names] <- reverse_names_correct
name
reverse_names_pos <- str_detect(name, "[a-zA-Z]{2,}, ")
reverse_names <- name[reverse_names_pos]
reverse_names
reverse_names_pos <- str_detect(name, "[a-zA-Z]{2,}, ")
reverse_names <- name[reverse_names_pos]
reverse_names_split <- str_split(reverse_names, ", ")
reverse_names_correct <- sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
name[reverse_names_pos] <- reverse_names_correct
name
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
reverse_names_pos <- str_detect(name, "[a-zA-Z]{2,}, ")
reverse_names <- name[reverse_names_pos]
reverse_names_split <- str_split(reverse_names, ", ")
reverse_names_correct <- sapply(reverse_names_split, function(x) str_c(x[2],x[1], sep = " "))
name[reverse_names_pos] <- reverse_names_correct
name
str_detect(test_string1,"[0-9]+\\$")
test_string1 <- c("afhff2566","eedf25446eeer","ezzff4557$")
str_detect(test_string1,"[0-9]+\\$")
test_string2 <- c("afhff2566","eed", " edddg ", "ezzfffgfg")
str_detect(test_string2,"\\b[a-z]{1,4}\\b")
test_string2 <- c("afhff2566","eed", " ed ", "ezzfffgfg")
str_detect(test_string2,"\\b[a-z]{1,4}\\b")
test_string2 <- c("ag66","eed", " ed ", "ezzfffgfg")
str_detect(test_string2,"\\b[a-z]{1,4}\\b")
test_string3 <- c("file.text","file34.txt", "file.txt ", "   file.txt", ".txt")
str_detect(test_string3,".*?\\.txt")
test_string3 <- c("file.txt","file34.txt", "file.txt ", "   file.txt", ".txt")
str_detect(test_string3,".*?\\.txt$")
test_string3 <- c("122file.txt","file34.txt", "file.txt ", "   file.txt", ".txt")
str_detect(test_string3,".*?\\.txt$")
test_string4 <- c("22/32/4567","1234/45/4555555", "12/23354/2455")
str_detect(test_string4,"\\{2}/\\{2}/\\{4}")
test_string4 <- c("22/32/4567","1234/45/4555555", "12/23354/2455")
str_detect(test_string4,"\\d{2}/\\d{2}/\\d{4}")
test_string4 <- c("3222/32/4567","1234/45/4555555", "12/23354/2455")
str_detect(test_string4,"\\d{2}/\\d{2}/\\d{4}")
test_string5 <- c("<(112)>44445</5446112>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>44445</<>","<112>44445</<>""<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>44445</<>","<112>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>44445</<>","<112>44445</<>","<(abc)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>44445</<>","<112>44445</<>","<(abc)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\$1>")
test_string5 <- c("<(112)>44445</1>","<112>44445</<>","<(abc)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>44445</112>","<112>44445</<>","<(abc)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>4444515667</>","<112>44445</<>","<(abc)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
test_string5 <- c("<(112)>444451125667</>","<112>44445</<>","<(abc)>44445</<>","<()>44445</5446112>", "<(abc)>44445</54abc12>","<(112)>44445</5446abc>")
str_detect(test_string5,"<(.+?)>.+?</\\1>")
str_extract("<(112)>444451125667</>","<(.+?)>.+?</\\1>")
str_extract("<(112)>445667</445112>","<(.+?)>.+?</\\1>")
str_extract("<(112)>4456671127789","<(.+?)>.+?\\1")
str_extract("<\\(112\\)>4456671127789\\(","<(.+?)>.+?\\1")
str_extract("<(112)>4456671127789","<(.+?)>.+?")
str_extract("<(112)>445667<","<(.+?)>.+?<")
str_extract("<(112)>445667</","<(.+?)>.+?</")
str_extract("<(112)>445667</","<(.+?)>.+?</\\1")
str_extract("<(112)>445667<</","<(.+?)>.+?</\\1")
str_extract("<(112)>445667112</","<(.+?)>.+?</\\1")
str_extract("<(112)>dfffg112</","<(.+?)>.+?</\\1")
str_extract("<(112)>dfffg112</","<(.+?)>.+?\\1")
str_extract("<(112)>dfffg(112)</","<(.+?)>.+?\\1")
str_extract("<(112)>dfffg(112)</","<(.+?)>.+?</\\1")
str_extract("<(112)>dff</fg(112)","<(.+?)>.+?</\\1")
str_extract("<(112)>dff</(112)","<(.+?)>.+?</\\1")
str_extract("<(112)>dff1225   44555</(112)","<(.+?)>.+?</\\1")
str_extract("<(112)>dff1225</44555</(112)","<(.+?)>.+?</\\1")
str_extract("<(112)>dff1225</44555</aahdddcg(112)","<(.+?)>.+?</\\1")
str_extract("<(112)>dff1225</44555</aahdddcg(112)/(112)","<(.+?)>.+?</\\1")
str_extract("<(112)>dff1225</44555</(112)/(112)","<(.+?)>.+?</\\1")
# load packages
library(stringr)
library(XML)
library(RCurl)
library(tau)
test_string1 <- c("afhff2566","eedf25446eeer","ezzff4557$")
str_detect(test_string1,"[0-9]+\\$")
str_detect(test_string1,"[[:digit:]]+\\$")
str_detect(test_string1,"[[:digit:]]{1,}\\$")
str_detect(test_string1,"[[:digit:]]{1,}[$]")
?str_replace
mailadres <- "chunkylover53[at]ao[dot]com"
str_replace(mailadres,"[at]","@")
mailadres
mailadres <- "chunkylover53[at]ao[dot]com"
str_replace(mailadres,"\\[at\\]","@")
mailadres <- "chunkylover53[at]ao[dot]com"
mailadres <- str_replace(mailadres,"\\[at\\]","@")
mailadres <- str_replace(mailadres,"\\[dot\\]","\\.")
mailadres
?str_extract
shopping_list <- c("apples x4", "flour", "sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract_all(mailadres, "[:digit:]")
str_extract_all(mailadres, "\\d")
str_extract_all(mailadres, "[[:digit:]]")
str_extract_all(break_news, "<.+>")
break_news <- "<title>+++BREAKING NEWS++++</title>"
str_extract_all(break_news, "<.+>")
str_extract_all(break_news, "<.+?>")
str_extract(break_news, "<.+?>")
math_string <- "(5-3)^2 = 5^2 - 2*5*3 + 3^2 conforms to the the binomial theorem"
str_extract(math_string,"[^0-9=+*()]+")
str_extract_all(math_string,"[^0-9=+*()]+")
str_extract_all(math_string,"[0-9=+*()]+")
str_extract_all(math_string,"[0-9=+-*^()]+")
str_extract_all(math_string,"[0-9=+-*()]+")
math_string
str_extract_all(math_string,"[0-9=+-*()]+")
str_extract_all(math_string,"[0-9=+*()]+")
str_extract_all(math_string,"[0-9=+-*()]+")
str_extract_all(math_string,"[0-9=+*()]+")
str_extract_all(math_string,"[0-9=+*()]+-")
str_extract_all(math_string,"[0-9=+*()-]+")
str_extract_all(math_string,"[0-9=+*() -]+")
str_extract_all(math_string,"[0-9=+*()^ -]+")
str_extract_all(math_string,"[0-9=+*()^ -]+?")
str_extract_all(math_string,"[0-9=+*()^-]+")
str_extract_all(math_string,"[â-zA-Z0-9=+*()^-]+")
str_extract_all(math_string,"[^a-zA-Z0-9=+*()^-]+")
str_extract_all(math_string,"[^a-zA-Z]+")
str_extract(math_string,"[^a-zA-Z]+")
str_extract(math_string,"[0-9=+*()^-]+")
str_extract(math_string,"[0-9=+*()^- ]+")
str_extract(math_string,"[0-9=+*()^ -]+")
q()
### --------------------------------------------------------------
### AUTOMATED DATA COLLECTION WITH R
### SIMON MUNZERT, CHRISTIAN RUBBA, PETER MEISSNER, DOMINIC NYHUIS
###
### CODE CHAPTER 9: SCRAPING THE WEB
### --------------------------------------------------------------
# load packages
library(RCurl)
library(XML)
library(stringr)
library(plyr)
### 9.1 Retrieval Scenarios
### --------------------------------------------------------------
### 9.1.1 Downloading ready-made files ---------------------------
### Scenario: download list of CSV files
# Download state-, county-, and precinct-level election results for the 2012 Presidential election in Maryland
# Data available in csv format at http://www.elections.state.md.us/elections/2012/election_data/index.html
# More information on the files at http://www.elections.state.md.us/elections/using_election_data_instructions.html
# set local directory
setwd("D:/rwebscraping")
dir.create("scenario-xmlconvenience")
setwd("scenario-xmlconvenience")
# parse document
mac_url    <- "http://en.wikipedia.org/wiki/Machiavelli"
mac_source <- readLines(mac_url, encoding = "UTF-8")
mac_parsed <- htmlParse(mac_source, encoding = "UTF-8")
mac_node   <- mac_parsed["//p"][[1]]
head(mac_source)
head(mac_parsed)
?htmlParse
mac_parsed
mac_parsed["//p"]
mac_parsed["//p"][[1]]
# getHTMLLinks()
getHTMLLinks(mac_url)[1:3]
getHTMLLinks(mac_source)[1:3]
getHTMLLinks(mac_parsed)[1:3]
getHTMLLinks(mac_node)[1:3]
getHTMLLinks(mac_source, xpQuery = "//a[@class='extiw']/@href")
getHTMLLinks(mac_source, xpQuery = "//a[@class='extiw']")
readHTMLList(mac_source)
names(readHTMLTable(mac_source))
readHTMLTable(mac_source)$persondata
names(readHTMLTable(mac_source))
readHTMLTable(mac_source)[[1]]
q()
