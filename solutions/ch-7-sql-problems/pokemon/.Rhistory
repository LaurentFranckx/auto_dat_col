)
problemsG <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
url <- "httpbin.org/cookies/set?myname=Eddie"
simple1 <- getURL(url = url, curl =  problemsD)
getCurlInfo(problemsG)
simple1
str_split(info$value()["text"],"\n")
str_split(info$value()["headerIn"],"\r")
str_split(info$value()["headerIn"],"\n")
str_split(info$value()["headerIn"],"\n\r")
getCurlInfo(problemsG)
url <- "httpbin.org/redirect/20"
simple1 <- getURL(url = url, curl =  problemsD)
simple1
getCurlInfo(problemsG)
str_split(info$value()["text"],"\n")
rm(info)
simple1 <- getURL(url = url, curl =  problemsD)
str_split(info$value()["headerOut"],"\r")
str_split(info$value()["headerIn"],"\n\r")
str_split(info$value()["text"],"\n")
info <- debugGatherer()
simple1 <- getURL(url = url, curl =  problemsD)
str_split(info$value()["headerOut"],"\r")
str_split(info$value()["headerIn"],"\n\r")
str_split(info$value()["text"],"\n")
problemsG <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
simple1 <- getURL(url = url, curl =  problemsG)
str_split(info$value()["headerOut"],"\r")
str_split(info$value()["headerIn"],"\n\r")
str_split(info$value()["text"],"\n")
getCurlInfo(problemsG)
simple1 <- getURL(url = url, curl =  problemsG)
url <- "httpbin.org/cookies/set?myname=Eddie"
simple1 <- getURL(url = url, curl =  problemsG)
getCurlInfo(problemsG)
url <- "httpbin.org/headers"
simple1 <- getURL(url = url, curl =  problemsG)
simple1
str_split(info$value()["text"],"\n")
getCurlInfo(problemsG)
str_split(info$value()["headerOut"],"\r")[[1]]
class(str_split(info$value()["headerOut"],"\r")[[1]])
gather_obj <- info$value()
headerout <- str_split(gather_obj["headerOut"],"\r")[[1]])
headerout <- str_split(gather_obj["headerOut"],"\r")[[1]]
headerout[1]
cat(headerout[1])
seq_along(headerout)
for(i in seq_along(headerout)){
cat(headerout[i])
}
presentHTTP(gather_obj){
headerout <- str_split(gather_obj["headerOut"],"\r")[[1]]
for(i in seq_along(headerout)){
cat("The header out info: \n")
cat(headerout[i])
}
headerin <- str_split(gather_obj["headerIn"],"\r")[[1]]
for(i in seq_along(headerin)){
cat("The header in info: \n")
cat(headerin[i])
}
text <- str_split(gather_obj["text"],"\r")[[1]]
for(i in seq_along(text)){
cat("The return text: \n")
cat(text[i])
}
}
presentHTTP <- function(gather_obj){
headerout <- str_split(gather_obj["headerOut"],"\r")[[1]]
for(i in seq_along(headerout)){
cat("The header out info: \n")
cat(headerout[i])
}
headerin <- str_split(gather_obj["headerIn"],"\r")[[1]]
for(i in seq_along(headerin)){
cat("The header in info: \n")
cat(headerin[i])
}
text <- str_split(gather_obj["text"],"\r")[[1]]
for(i in seq_along(text)){
cat("The return text: \n")
cat(text[i])
}
}
rm(info)
info <- debugGatherer()
problemsG <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
url <- "httpbin.org/cookies/set?myname=Eddie"
simple1 <- getURL(url = url, curl =  problemsG)
getCurlInfo(problemsG)
presentHTTP(info$value())
presentHTTP <- function(gather_obj){
headerout <- str_split(gather_obj["headerOut"],"\r")[[1]]
cat("The header out info: \n")
for(i in seq_along(headerout)){
cat(headerout[i])
}
headerin <- str_split(gather_obj["headerIn"],"\r")[[1]]
cat("The header in info: \n")
for(i in seq_along(headerin)){
cat(headerin[i])
}
text <- str_split(gather_obj["text"],"\r")[[1]]
cat("The return text: \n")
for(i in seq_along(text)){
cat(text[i])
}
}
info <- debugGatherer()
problemsG <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
#url <- "http://www.r-datacollection.com/materials/http/simple.html"
url <- "httpbin.org/cookies/set?myname=Eddie"
simple1 <- getURL(url = url, curl =  problemsG)
presentHTTP(info$value())
simple1 <- getURL(url =  "httpbin.org/redirect/20", curl =  problemsG)
presentHTTP(info$value())
presentHTTP <- function(gather_obj){
headerout <- str_split(gather_obj["headerOut"],"\r")[[1]]
cat("The header out info: \n")
cat("***********************: \n")
for(i in seq_along(headerout)){
cat(headerout[i])
}
headerin <- str_split(gather_obj["headerIn"],"\r")[[1]]
cat("The header in info: \n")
cat("***********************: \n")
for(i in seq_along(headerin)){
cat(headerin[i])
}
text <- str_split(gather_obj["text"],"\r")[[1]]
cat("The return text: \n")
cat("***********************: \n")
for(i in seq_along(text)){
cat(text[i])
}
}
info <- debugGatherer()
problemsG <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
#url <- "http://www.r-datacollection.com/materials/http/simple.html"
url <- "httpbin.org/cookies/set?myname=Eddie"
simple1 <- getURL(url = url, curl =  problemsG)
presentHTTP(info$value())
simple1 <- getURL(url =  "httpbin.org/redirect/20", curl =  problemsG)
presentHTTP(info$value())
info <- debugGatherer()
problemsM <- getCurlHandle(.opts = options()$RCurlOptions
#getOption("RCurlOptions")
, autoreferer = TRUE, debugfunction = info$update, verbose = T
)
urls <- readLines("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
urls
getURL("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
getURLContent("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
download.file("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
try1 <- getURL("http://www.r-datacollection.com/materials/http/bunchoffiles.html")
class(try1)
urls
try1
str_split(try1,"\n")
?readLines
function listdir($dir='') {
if (!is_dir($dir)) {
return false;
}
$files = array();
listdiraux($dir, $files);
return $files;
}
?getForm
q()
library(plyr)
library(RCurl)
library(stringr)
library(XML)
url <- "http://www.r-datacollection.com/materials/http/GETexample.php"
namepar <- "Laurent+Franckx"
agepar <- "477"
url_get <- paste(url,"?","name=",namepar,"&","age =", agepar,sep="")
cat(getURL(url_get))
q()
log(99)
ln(99)
?log
log(11)/log(2)
2^7
2^6
log(101)/log(2)
log(401)/log(2)
2^9
2^8
log(1001)/log(2)
library(travelr)
q()
sqrt(13)
q()
RSiteSearch(".RData corrupted")
library(httr)
r5 <- GET(url = "https://data.seattle.gov/views/8agr-hifc.json?accessType=WEBSITE&method=getDefaultView")
content(r5)$columns
?close
?system.file
?iconv
library(tm)
getTokenizers()
?system
q()
library("poweRlaw")
m_m = displ$new(moby)
data(moby)
m_m = displ$new(moby)
(est = estimate_xmin(m_m))
m_m$setXmin(est)
plot(m_m)
summary(m_m$internal)
summary(m_m$internal$frq)
summary(m_m$internal$freq)
summary(m_m$internal$values)
tail(m_m$internal$freq)
head(GlobFreqTable)
?row.names
q()
?agrep
load("D:/coursera/dsc_capstone/accum_mat_4gr.RData")
load("D:/coursera/dsc_capstone/accum_mat_3gr.RData")
q()
load("D:/coursera/dsc_capstone/accum_mat_2gr.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/accum_mat_2gr_amatch.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/accum_mat_3gr.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/accum_mat_3gr_amatchk0.25.RData")
View(accu_mat)
View(accu_mat)
load("D:/coursera/dsc_capstone/tst_vs_tr_4_news_blogs_k_0.25.RData")
View(TextToTest)
View(TextToTest)
shiny::runApp('D:/coursera/dsc_capstone/app1')
samplesize <- 10
resdir <- "D:/coursera/caps_res/"
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep="")
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""))
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TestCorpus <- "news"
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""))
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
i <- 4
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""))
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest
TextToTest <- TextToTest[, 2]
TextToTest
splitstring <- strsplit(TextToTest, " ")[[1]]
splitstring <- strsplit(TextToTest, " ")[[1]]
i <-1
splitstring <- strsplit(TextToTest[i], " ")[[1]]
TextToTest[i]
class(TextToTest[i])
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""), stringsAsFactors = FALSE)
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest <- TextToTest[, 2]
i <-4
DfToSample <- read.table(paste(resdir, "US.",TestCorpus,"Tokened", i,"Gr_uniq.txt",sep=""), stringsAsFactors = FALSE)
TextToSampleId <- sample(nrow(DfToSample), samplesize)
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest <- TextToTest[, 2]
TextToTest
j <- 1
splitstring <- strsplit(TextToTest[j], " ")[[1]]
splitstring
stringlenth <- length(splitstring)
testword <- splitstring[stringlenth]
testword
testword_vec <- character(length(TextToTest))
testword_vec
for(j in seq_along(length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
TextToTest <- t(rbind(TextToTest,testword_vec))
for(j in seq_along(length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
TextToTest <- t(rbind(TextToTest,testword_vec))
TextToTest <- DfToSample[TextToSampleId  , ]
TextToTest <- TextToTest[, 2]
TextToTest
testword_vec <- character(length(TextToTest))
for(j in seq_along(length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
testword_vec
splitstring[stringlenth]
j
length(TextToTest)
testword_vec <- character(length(TextToTest))
for(j in seq_along(1:length(TextToTest))){
splitstring <- strsplit(TextToTest[j], " ")[[1]]
stringlenth <- length(splitstring)
testword_vec[j] <- splitstring[stringlenth]
}
testword_vec
TextToTest <- t(rbind(TextToTest,testword_vec))
TextToTest
colnames(TextToTest) <- c("first","V3")
TextToTest
CorpusUsedForTest <- TrainCorpus
TextToTest$first <- as.character(TextToTest$first)
TestResult <- sapply(TextToTest$first, function(x) SearchWrapper(x, CorpusUsedForTest, corpuslist, decrease = k), simplify = TRUE)
TrainCorpus <- "news"
CorpusUsedForTest <- TrainCorpus
TextToTest$first <- as.character(TextToTest$first)
TestResult <- sapply(TextToTest$first, function(x) SearchWrapper(x, CorpusUsedForTest, corpuslist, decrease = k), simplify = TRUE)
class(TextToTest)
TextToTest <- as.data.frame(TextToTest)
CorpusUsedForTest <- TrainCorpus
TextToTest$first <- as.character(TextToTest$first)
TestResult <- sapply(TextToTest$first, function(x) SearchWrapper(x, CorpusUsedForTest, corpuslist, decrease = k), simplify = TRUE)
load(file = "app1/data/corpuslist.RData")
getwd()
source('D:/coursera/dsc_capstone/testing_model.R', echo=TRUE)
?lineprof
devtools::install_github("hadley/lineprof")
library(lineprof)
lineprof
?lineprof
?shine
?stri_count_words
q()
?gc()
gcinfo(verbose)
getOption("verbose")
gcinfo(TRUE)
gc()
gcinfo(verbose)
getOption("verbose")
f3 <- function() {
x <- 1:1e6
function() 10
}
z <- f3()
z
ls(z)
environment(z)
environment(z)$x
f3 <- function() {
x <- 1:1e6
function() 10
}
z <- f3()
head(environment(z)$x)
tail(environment(z)$x)
z
shiny::runApp('D:/coursera/dsc_capstone/app2')
library(travelr)
q()
?rowMeans
?colMax
?apply
?close
(0.05*6+0.2*6+0.1*9+0.1*8+0.55*11)/11.2
(0.05*6+0.2*6+0.1*9+0.1*8+0.55*11)/11.2
?make
?quantile
q()
?aggregate
?join
plyr::join
?plyr::join
q()
setwd("D:/rwebscraping/solutions/ch-7-sql-problems/pokemon")
library(RSQLite)
pokemon <- read.csv2("pokemon.csv")
pokemon_species <- read.csv2("pokemon_species.csv")
pokemon_stats <- read.csv2("pokemon_stats.csv")
pokemon_types <- read.csv2("pokemon_types.csv")
stats <- read.csv2("stats.csv")
type_efficacy <- read.csv2("type_efficacy.csv")
types <- read.csv2("types.csv")
#con <- dbConnect(SQLite(), dbname = tempfile())
#con <- dbConnect(SQLite(), dbname = "")
con <- dbConnect(SQLite(), dbname = "pokemondb.sqlite")
dbListTables(con)
dbWriteTable(con,"pokemon", pokemon)
dbWriteTable(con,"pokemon_species", pokemon_species)
dbWriteTable(con,"pokemon_stats", pokemon_stats)
dbWriteTable(con,"pokemon_types", pokemon_types)
dbWriteTable(con,"stats", stats)
dbWriteTable(con,"type_efficacy", type_efficacy)
dbWriteTable(con,"types", types)
dbListTables(con)
statsview <- dbSendQuery(con,"CREATE VIEW statsview AS
SELECT  base_stat, damage_class_id, pokemon_id, damage_class_id
FROM pokemon_stats
INNER JOIN stats ON pokemon_stats.stat_id = stats.id   ")
dmRemoveTable(con, "statsview")
dbRemoveTable(con, "statsview")
dbRemoveTable(con, DROP VIEW, "statsview")
dbRemoveTable(con, "statsview", "DROP VIEW")
DROP VIEW statsview
dbRemoveTable(con, "DROP VIEW statsview")
dbRemoveTable(con, "DROP VIEW")
dbRemoveTable(con, "DROP VIEW statsview")
dbSendQuery(con, "DROP VIEW statsview")
statsview <- dbSendQuery(con,"CREATE VIEW statsview AS
SELECT  base_stat, damage_class_id, pokemon_id, damage_class_id
FROM pokemon_stats
INNER JOIN stats ON pokemon_stats.stat_id = stats.id   ")
sq6 <- "SELECT * FROM [typeview] INNER JOIN pokeview ON [typeview].pokemon_id = [pokeview].species_id WHERE [typeview].identifier = 'dragon' "
res6 <- dbGetQuery(con,sq6)
View(res6)
max_attack <- "SELECT MAX(stat_id) FROM pokemon_stats WHERE stat_id = 2 "
res6 <- dbGetQuery(con,max_attack)
res6
max_attack <- "SELECT MAX(base_stat) FROM pokemon_stats WHERE stat_id = 2 "
res6 <- dbGetQuery(con,max_attack)
res6
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = MAX([statsview].base_stat) "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = res6 "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = 'res6' "
res7 <- dbGetQuery(con,sq7)
res7
res6
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id "
res7 <- dbGetQuery(con,sq7)
View(res7)
View(res7)
res6
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = res6 "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = MAX( [statsview].base_stat) "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = res6 "
res7 <- dbGetQuery(con,sq7)
max_att_num <- as.numeric(res6)
max_att_num
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE [statsview].base_stat = max_att_num "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE ([statsview].base_stat = max_att_num) "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE (ase_stat = max_att_num) "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE (base_stat = max_att_num) "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = max_att_num "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = 'max_att_num' "
res7 <- dbGetQuery(con,sq7)
res7
max_attack <- "SELECT MAX(base_stat) AS "Highest attack value" FROM pokemon_stats WHERE stat_id = 2 "
res6 <- dbGetQuery(con,max_attack)
max_attack <- "SELECT MAX(base_stat) AS 'Highest attack value' FROM pokemon_stats WHERE stat_id = 2 "
res6 <- dbGetQuery(con,max_attack)
res6
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = 'Highest attack value'"
res7 <- dbGetQuery(con,sq7)
res7
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = res6.'Highest attack value'"
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview] INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = res6 "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview],
("SELECT MAX(base_stat) AS 'Highest_attack' FROM pokemon_stats WHERE stat_id = 2 ") maxresult
INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = maxresult.Highest_attack "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview],
('SELECT MAX(base_stat) AS 'Highest_attack' FROM pokemon_stats WHERE stat_id = 2 ') maxresult
INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = maxresult.Highest_attack "
res7 <- dbGetQuery(con,sq7)
sq7 <- "SELECT * FROM [statsview],
(SELECT MAX(base_stat) AS 'Highest_attack' FROM pokemon_stats WHERE stat_id = 2 ) maxresult
INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = maxresult.Highest_attack "
res7 <- dbGetQuery(con,sq7)
res7
sq8 <- "SELECT * FROM [statsview],
(SELECT MAX(base_stat) AS 'Highest_defense' FROM pokemon_stats WHERE stat_id = 3 ) maxresult
INNER JOIN pokeview ON [statsview].pokemon_id = [pokeview].species_id WHERE base_stat = maxresult.Highest_defense "
res8 <- dbGetQuery(con,sq8)
res8
